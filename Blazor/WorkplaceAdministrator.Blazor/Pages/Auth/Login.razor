@page "/"
@page "/auth/login"

@using WorkplaceAdministrator.Common.Dtos
@layout AuthLayout

@inject NavigationManager _navManager
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authStateProvider

    <EditForm class="login-container" Model="loginInfo" OnValidSubmit="AttemptLoginAsync">
        <div class="login-form">
            <h1 class="text-center">Login</h1>
            <hr />
            <br />
            <DataAnnotationsValidator />
            <ValidationSummary />
            <SfTextBox CssClass="email-input" Placeholder="Email" @bind-value="loginInfo.Email" />
            <SfTextBox Placeholder="Password" Type="password" @bind-Value="loginInfo.Password" />
            <br />
            <p class="text-center" style="display: none;" id="text">WARNING! Caps lock is ON.</p>
            <!--put remember me checkbox-->
            <br />
            <button class="btn-block btn-primary" type="submit">Log in</button>
            <button class="btn-block btn-primary" @onclick="GoToRegister">Apply for volunteering</button>
            <a id="forgot-password">Forgot your password?</a>
        </div>
    </EditForm>


@code {
    LoginDto loginInfo = new LoginDto();

    private async void AttemptLoginAsync()
    {
        var response = await ((WorkplaceAuthStateProvider)_authStateProvider).LoginAsync(loginInfo);

        bool auth = response.User.Identity.IsAuthenticated;

        if (response.User.Identity.IsAuthenticated)
        {
            if (response.User.IsInRole("Admin") || response.User.IsInRole("SuperAdmin"))
            {
                _navManager.NavigateTo("/admin/list");
            }
            else
            {
                _navManager.NavigateTo("/accounts/index");
            }
        }
    }

    private void GoToRegister()
    {
        _navManager.NavigateTo("/auth/register");
    }
}