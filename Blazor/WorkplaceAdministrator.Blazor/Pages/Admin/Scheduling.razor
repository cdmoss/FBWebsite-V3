@page "/admin/schedule"
@attribute [Authorize(Roles = "Admin, Staff")]
@using Syncfusion.Blazor.Schedule
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using WorkplaceAdministrator.Common
@inject IShiftRepo _shiftRepo
@inject IAccountRepo _accountRepo
@inject IPositionRepo _positionRepo

<h1>Schedule</h1>

<SfSchedule TValue="ShiftReadEditDto">
    <ScheduleTemplates>
        <EditorTemplate>
            <table class="custom-event-editor" width="100%" cellpadding="5">
                <tbody>
                    <tr>
                        <td class="e-textlabel">From</td>
                        <td colspan="4">
                            <SfDateTimePicker ID="StartTime" HtmlAttributes="@" CssClass="e-field" Value="@((context as AppointmentData).StartTime.ToUniversalTime())"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">To</td>
                        <td colspan="4">
                            <SfDateTimePicker ID="EndTime" HtmlAttributes="@EndName" CssClass="e-field" Value="@((context as AppointmentData).EndTime.ToUniversalTime())"></SfDateTimePicker>
                        </td>
                    </tr>
                    <tr>
                        <td class="e-textlabel">Reason</td>
                        <td colspan="4">
                            <textarea id="Description" class="e-field e-input" name="Description" rows="3" cols="50" value="@((context as AppointmentData).Description)" style="width: 100%; height: 60px !important; resize: vertical"></textarea>
                        </td>
                    </tr>
                </tbody>
            </table>
        </EditorTemplate>
    </ScheduleTemplates>
    <ScheduleEventSettings DataSource="@Shifts"></ScheduleEventSettings>
</SfSchedule>

@code{

    List<ShiftReadEditDto> Shifts = new List<ShiftReadEditDto>();
    public List<AccountAdminListDto> Accounts { get; set; }
    public List<Position> Positions { get; set; }

    protected async override void OnInitialized()
    {
        Shifts = await _shiftRepo.GetAllShifts();
        Accounts = await _accountRepo.GetAllUsers();
        Positions = await _positionRepo.GetAllPositions();
    }

    public void OnClick()
    {
        AppointmentData eventData = new AppointmentData
        {
            Id = 10,
            Subject = "Added Event",
            StartTime = new DateTime(2020, 1, 7, 9, 30, 0),
            EndTime = new DateTime(2020, 1, 7, 11, 30, 0),
        };
    }

    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string RecurrenceRule { get; set; }
        public string RecurrenceException { get; set; }
        public Nullable<int> RecurrenceID { get; set; }
    }
}
