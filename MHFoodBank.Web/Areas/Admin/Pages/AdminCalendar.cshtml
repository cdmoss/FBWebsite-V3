@page

@using MHFoodBank.Common
@using MHFoodBank.Common.Dtos
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Antiforgery;
@using Syncfusion.EJ2
@inject IAntiforgery antiForgery
@inject UserManager<AppUser> _userManager

@model MHFoodBank.Web.Areas.Admin.Pages.AdminCalendar
@{
    Layout = "~/Areas/Admin/Pages/Shared/_Layout.cshtml";
    ViewData["Title"] = "Admin Calendar";
}

@section Styles {
    <link href='~/fullcalendar/packages/core/main.css' rel='stylesheet' />
    <link href='~/fullcalendar/packages/daygrid/main.css' rel='stylesheet' />
    <link href='~/fullcalendar/packages/timegrid/main.css' rel='stylesheet' />
    <link href='~/fullcalendar/packages/list/main.css' rel='stylesheet' />
    <link href="~/css/admincalendar.css" rel="stylesheet" />
}

@section Scripts {
    <script src='~/fullcalendar/packages/core/main.js'></script>
    <script src='~/fullcalendar/packages/interaction/main.js'></script>
    <script src='~/fullcalendar/packages/daygrid/main.js'></script>
    <script src='~/fullcalendar/packages/timegrid/main.js'></script>
    <script src="~/lib/datepicker/datepicker.js"></script>
    <script src='~/fullcalendar/packages/list/main.js'></script>
    <script src="~/fullcalendar/vendor/rrule.js"></script>
    <script src="~/lib/bootstrap-datepicker/js/bootstrap-datepicker.js"></script>
    <script src="~/fullcalendar/packages/rrule/main.js"></script>
}
<script src="~/js/admincalendar_events_recurring.js"></script>
<script src="~/js/admincalendar_ui.js"></script>
<script src="~/js/admincalendar_events_main.js"></script>
<script src="~/js/admincalendar_events_single.js"></script>
<script src="~/js/admincalendar_validate.js"></script>

<div class="ml-5 mr-5">
    <partial name="_AdminStatusMessage" for="StatusMessage" />
    <form method="post" id="container">
        @if (String.IsNullOrWhiteSpace(Model.SearchedName))
        {
            <input id="search-name" class="form-control" placeholder="Search by name..." asp-for="@Model.SearchedName" />
        }
        else
        {
            <input id="search-name" class="form-control" value="@Model.SearchedName" asp-for="@Model.SearchedName" />
        }
        <select id="search-position" class="form-control" asp-items="@(new SelectList(Model.PositionsWithAll, "Id", "Name", Model.SearchedPositionId))" asp-for="@Model.SearchedPositionId" required>
        </select>
        <button id="search" class="btn btn-primary" asp-page-handler="Search"><i class="fas fa-search"></i></button>
        <div class="btn-group" id="main-buttons">
            <div onclick="$('#add-position-modal').modal(); hideColorPickerIcon();" class="btn btn-primary"><i class="fas fa-plus"></i> Position</div>
            <div onclick="$('#edit-position-modal').modal(); hideColorPickerIcon();" class="btn btn-primary">
                <i class="fa fa-edit"></i> Positions
            </div>
        </div>
    </form>
    <hr />

    @{
        var shiftManager = new DataManager
        {
            Url = "AdminCalendar?handler=GetShifts",
            CrudUrl = "AdminCalendar?handler=UpdateShifts",
            InsertUrl = "AdminCalendar?handler=InsertShift",
            Adaptor = "UrlAdaptor",
            CrossDomain = true,
            Headers = new object[] { new { RequestVerificationToken = antiForgery.GetTokens(HttpContext).RequestToken } }
        };
    }

    <div style="height: 80vh;">
        <ejs-schedule id="schedule" selectedDate="DateTime.Now" currentView="TimelineWeek" showQuickInfo="false" width="100%" height="100%" popupOpen="onPopupOpen" editorTemplate="#ShiftEditorTemplate" actionBegin="onActionBegin">
            <!--adding byGroupId="false" fixes the issues that prevents shifts from being added-->
            <e-schedule-group byGroupID="false" resources="Model.ResourceNames"></e-schedule-group>
            <e-schedule-resources>
                <e-schedule-resource dataSource="Model.Positions" field="PositionId" title="Positions" allowMultiple="false" idField="Id" textField="Name" name="Positions"></e-schedule-resource>
                <e-schedule-resource dataSource="Model.Volunteers" field="VolunteerProfileId" title="Volunteers" allowMultiple="false" idField="Id" textField="FullNameWithID" name="Volunteers"></e-schedule-resource>
            </e-schedule-resources>
            <e-schedule-views>
                <e-schedule-view option="TimelineWeek"></e-schedule-view>
                <e-schedule-view option="TimelineMonth"></e-schedule-view>
                <e-schedule-view option="Agenda"></e-schedule-view>
            </e-schedule-views>
            <e-schedule-eventsettings dataSource="shiftManager">
            </e-schedule-eventsettings>
        </ejs-schedule>
    </div>

    <script id="ShiftEditorTemplate" type="text/template">
        <table class="custom-event-editor" width="100%" cellpadding="5">
            <tbody>
                <tr>
                    <td class="e-textlabel">From</td>
                    <td colspan="4">
                        <input id="StartTime" class="e-field" type="text" name="StartTime" />
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">To</td>
                    <td colspan="4">
                        <input id="EndTime" class="e-field" type="text" name="EndTime" />
                    </td>
                </tr>
                <tr>
                    <td colspan="4">
                        <br />
                        <div id="RecurrenceEditor"></div>
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel e-float-text">Volunteer</td>
                    <td colspan="4">
                        <input type="text" id="VolunteerId" placeholder="Select a volunteer..." name="VolunteerProfileId" class="e-field" style="width: 100%" />
                    </td>
                </tr>
                <tr>
                    <td id="position-label" class="e-textlabel">Position</td>
                    <td id="position-section" colspan="4">
                        <input type="text" id="PositionId" placeholder="Select a position..." name="PositionId" class="e-field" style="width: 100%" />
                        <div id="multi-position-selector">
                            @foreach (var position in Model.Positions)
                            {
                                <text><div style="display: flex;"><input style="width: 35%;" type="text" name="@position.Name-amount" class="position-amount" /><label style="width: 65%;" class="pl-2">@position.Name</label></div></text>
                            }
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="4">
                        <div class="d-flex justify-content-start">
                            <input type="text" id="multi-position-toggle" />
                            <label class="e-textlabel pl-2">Make This Shift For Multiple Positions</label>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="e-textlabel">Notes</td>
                    <td colspan="4">
                        <textarea id="Description" class="e-field e-input" name="Description" rows="3" cols="50" style="width: 100%; height: 60px !important; resize: vertical"></textarea>
                    </td>
                </tr>
            </tbody>
        </table>
    </script>

    <!--This function configures the inputs on the editor window-->
    <script type="text/javascript">
        function onActionBegin(args) {
            @{
                var user = await _userManager.GetUserAsync(User);
                bool isStaff = await _userManager.IsInRoleAsync(user, "staff");
            }

            @if (isStaff)
            {
                <text>
                if (args.requestType === 'eventCreate' && (new Date().getDate() > args.data[0].StartTime.getDate()))
                {
                    args.cancel = true;
                    alert("You do not have permission to add shifts before today's date");
                }
                </text>
            }
        };
        function onPopupOpen(args) {
            if (args.type === 'Editor') {
                var volunteers = @Html.Raw(Json.Serialize(Model.Volunteers));
                volunteers.push({ "Id": 0, "FullNameWithID": "Open" });
                var positions = @Html.Raw(Json.Serialize(Model.Positions));
                var schedule = document.getElementById('schedule').ej2_instances[0];
                var startElement = args.element.querySelector('#StartTime');
                if (!startElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(startElement.value) || new Date() }, startElement);
                }
                var endElement = args.element.querySelector('#EndTime');
                if (!endElement.classList.contains('e-datetimepicker')) {
                    new ej.calendars.DateTimePicker({ value: new Date(endElement.value) || new Date() }, endElement);
                }
                var volunteerElement = args.element.querySelector('#VolunteerId');
                if (!volunteerElement.classList.contains('e-dropdownlist')) {
                    volunteerDropDown = new ej.dropdowns.DropDownList({
                        placeholder: "Select a volunteer...",
                        dataSource: volunteers,
                        value: args.data.VolunteerProfileId,
                        fields: {text: 'FullNameWithID', value: "Id"}
                    });
                    volunteerDropDown.appendTo(volunteerElement);
                }
                var positionElement = args.element.querySelector('#PositionId');
                if (!positionElement.classList.contains('e-dropdownlist')) {
                    var positionDropDown = new ej.dropdowns.DropDownList({
                        placeholder: "Select a position...",
                        dataSource: positions,
                        value: args.data.PositionId,
                        fields: { text: 'Name', value: "Id" }
                    });
                    positionDropDown.appendTo(positionElement);
                }
                var recurElement = args.element.querySelector('#RecurrenceEditor');
                if (!recurElement.classList.contains('e-recurrenceeditor')) {
                    recurrObject = new ej.schedule.RecurrenceEditor({
                    });
                    recurrObject.appendTo(recurElement);
                    schedule.setRecurrenceEditor(recurrObject);
                }
                var multiPositionCheck = args.element.querySelector('#multi-position-toggle');
                if (!multiPositionCheck.classList.contains('e-checkbox')) {
                    multiPositionObject = new ej.buttons.CheckBox({
                    });
                    multiPositionObject.appendTo(multiPositionCheck);
                }
                var positionAmountInputs = args.element.getElementsByClassName('position-amount');
                Array.from(positionAmountInputs).forEach(function(amountInput) {
                    if (!amountInput.classList.contains('e-numerictextbox')) {
                        numericTextBox = new ej.inputs.NumericTextBox({
                        });
                        numericTextBox.appendTo(amountInput);
                    }
                });
            }
        }
    </script>
</div>

<!--modal for adding a new position-->
<form class="shift-form" method="post">
    <div id="add-position-modal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 id="modalTitle" class="modal-title">Add Position</h4>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <label style="margin-top: 3px; padding-right: 10px;" for="position-add">Name</label>
                    <input type="text" class="form-control mb-2" id="add-position-name" asp-for="@Model.NewPositionName" required>
                    <label style="margin-top: 3px; padding-right: 10px;" for="position-add asp-for=" @Model.NewPositionColor "">Color</label>
                    <br />
                    <input type="color" id="position-color" class=" w-25" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" asp-page-handler="AddPosition">Add</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</form>

<!--modal for editing a new position-->
<form class="shift-form" method="post">
    <div id="edit-position-modal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 id="modalTitle" class="modal-title">Edit Position</h4>
                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span> <span class="sr-only">Close</span></button>
                </div>
                <div id="modalBody" class="modal-body">
                    <label style="margin-top: 3px; padding-right: 10px;" for="edit-position-original">Position</label>
                    <input class="form-control"
                           type="text"
                           id="edit-position-original"
                           asp-for="@Model.SelectedPositionName"
                           list="positions"
                           placeholder="Select a position..."
                           required>
                    <br />
                    <label style="margin-top: 3px; padding-right: 10px;" for="">New Position Name</label>
                    <input type="text" class="form-control" id="edit-position-name" asp-for="@Model.SelectedPositionName">
                    <br />
                    <label style="margin-top: 3px; padding-right: 10px;" for="position-add">New Color</label>
                    <br />
                    <input type="color" id="position-color" class=" w-25" asp-for="@Model.SelectedPositionColor" />
                </div>
                <div class="modal-footer">
                    <button class="btn btn-primary" asp-page-handler="EditPosition">Submit Changes</button>
                    <button class="btn btn-danger" asp-page-handler="RemovePosition">Remove</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
</form>

<script>
    function hideColorPickerIcon() {
        Array.from(document.getElementsByClassName('colorpick-eyedropper-input-trigger')).forEach(function (icon) {
            icon.style.display = 'none';
        });
    }
</script>

<script>
    function showTimezone() {
        let schedule = document.getElementById('schedule').ej2_instances[0];
        console.log(schedule.timezone);
    }
</script>

<datalist id="volunteers"></datalist>
<datalist id="positions"></datalist>

<script>

    function multiPositionChecked() {
        let multiPositionElement = document.getElementById("multi-position");
        if (multiPositionElement.checked == true) {
            document.getElementById("positions-section").display = "";
        }
    }

    let volunteers = new Array();
    @foreach (var volunteer in Model.Volunteers)
    {
        <text>volunteers.push('</text>@volunteer.FullNameWithID<text>');</text>
    }

    let options = '';

    for (var i = 0; i < volunteers.length; i++) {
        options += '<option value="' + volunteers[i] + '">';
    }

    document.getElementById('volunteers').innerHTML = options;

    let positions = new Array();
    @foreach (var position in Model.Positions.Where(p => p.Name != "All" && !p.Deleted))
    {
        <text>positions.push('</text>@position.Name<text>');</text>
    }

    options = '';

    for (var i = 0; i < positions.length; i++) {
        options += '<option value="' + positions[i] + '">';
    }

    document.getElementById('positions').innerHTML = options;

</script>